variables:
  DEBIAN_FRONTEND: noninteractive
  APT_GET_INSTALL: "apt-get install --no-install-recommends -q -y"

stages:
  - check_coding_style
  - test_build
  - release
  - deploy

pre-commit:
  stage: check_coding_style
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  script:
    - date
    # install necessary packages:
    - apk add --no-cache bash gcc git libc-dev npm py3-pip python3-dev
    - pip3 install pre-commit
    - pre-commit --version
    - pre-commit run --all-files

arduino-lint:
  stage: check_coding_style
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL curl ca-certificates
    - (cd && curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | sh)
    - ~/bin/arduino-lint --version
    - ~/bin/arduino-lint --compliance strict --library-manager submit
    #- ~/bin/arduino-lint --compliance strict --library-manager update

arduino_ci:
  stage: test_build
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL ruby build-essential git
    - echo "source 'https://rubygems.org'" > Gemfile
    - echo -n "gem 'arduino_ci', git:" >> Gemfile
    - echo " 'https://github.com/Arduino-CI/arduino_ci.git'" >> Gemfile
    - gem install bundler
    - bundle install
    - export EXPECT_UNITTESTS=1
    - export EXPECT_EXAMPLES=1
    - echo "mock Udp.h for unittests"
    - cp -p extras/udp_mock.h /var/lib/gems/*/bundler/gems/arduino_ci-*/cpp/arduino/Udp.h
    - bundle exec arduino_ci.rb --skip-examples-compilation

arduino-cli:
  stage: test_build
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL curl ca-certificates parallel
    - (cd && curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh)
    - ~/bin/arduino-cli help
    - ~/bin/arduino-cli version
    - ~/bin/arduino-cli core install arduino:samd
    - ~/bin/arduino-cli lib install Ethernet WiFiNINA
    # install precise_sntp by linking
    - p=$(pwd)
    - (cd ~/Arduino/libraries/ && ln -s $p)
    # prepare examples
    - echo "#define SECRET_SSID \"foo\"" > examples/get_time_and_print_wifinina/arduino_secrets.h
    - echo "#define SECRET_PASS \"bar\"" >> examples/get_time_and_print_wifinina/arduino_secrets.h
    # compile examples
    - "(cd examples && parallel -k -v ~/bin/arduino-cli compile -v -b ::: arduino:samd:mkr1000 arduino:samd:mkrwifi1010 arduino:samd:mkr1000 :::+ get_time_and_print_ethernet get_time_and_print_wifinina get_time_and_print_adapt_interval)"

prepare_release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  script:
    - date
    - cat library.properties
    - echo "EXTRA_DESCRIPTION=$(grep sentence library.properties | cut -d "=" -f 2) $(grep paragraph library.properties | cut -d '=' -f 2)" > variables.env
    - echo "TAG=$(grep version library.properties | cut -d "=" -f 2)" >> variables.env
    - cat variables.env
  artifacts:
    reports:
      dotenv: variables.env

release_job:
  stage: release
  image:
    # https://docs.gitlab.com/ee/user/project/releases/release_cicd_examples.html#create-release-metadata-in-a-custom-script
    registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_release
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - date
    - echo "running release_job for $TAG"
  release:
    name: 'Release $TAG'
    description: '$EXTRA_DESCRIPTION'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'
